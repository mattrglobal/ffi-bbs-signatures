/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id 'application'
    id 'signing'
}

group 'com.github.mattrglobal'
version '1.6-SNAPSHOT'

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: 'signing'

ext {
    javaMainClass = "bbs.signatures.Bbs"
}

application {
    mainClassName = javaMainClass
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

build {
    dependsOn ':copyWindowsBinaries'
    dependsOn ':copyLinuxBinaries'
    dependsOn ':buildAndCopyAndroidBinaries'
}

task copyWindowsBinaries(type: Copy) {
    dependsOn ':buildWindowsBinaries'
    from "../../target/x86_64-pc-windows-gnu/release/bbs.dll"
    into "src/main/jniLibs/windows"
}

task buildWindowsBinaries(type: Exec) {
    workingDir "${projectDir}"
    commandLine 'rustup', 'target', 'add', 'x86_64-pc-windows-gnu'
    commandLine 'cargo', 'build', '--target', 'x86_64-pc-windows-gnu', '--release', '--features', 'java'
}

task copyLinuxBinaries(type: Copy) {
    dependsOn ':buildLinuxBinaries'
    from "../../target/x86_64-unknown-linux-gnu/release/libbbs.so"
    into "src/main/jniLibs/linux"
}

task buildLinuxBinaries(type: Exec) {
    workingDir "${projectDir}"
    commandLine 'rustup', 'target', 'add', 'x86_64-unknown-linux-gnu'
    commandLine 'cargo', 'zigbuild', '--target', 'x86_64-unknown-linux-gnu', '--release', '--features', 'java'
}

task buildAndCopyAndroidBinaries(type: Exec) {
    workingDir "${projectDir}"
    commandLine 'rustup', 'target', 'add', 'armv7-linux-androideabi', 'aarch64-linux-android', 'x86_64-linux-android', 'i686-linux-android'
    commandLine 'cargo', 'ndk', '--manifest-path', '../../Cargo.toml', '--target', 'armeabi-v7a', '--target', 'arm64-v8a', '--target', 'x86_64', '--target', 'x86', '-o', 'src/main/jniLibs', 'build', '--release'
}

/* Test with JUNIT on different platform (windows, linux, ...) */
test {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        dependsOn ':copyWindowsBinaries'
        systemProperty "java.library.path", 'src/main/jniLibs/windows'
        useJUnit()
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()){
        dependsOn ':copyLinuxBinaries'
        systemProperty "java.library.path", 'src/main/jniLibs/linux'
        useJUnit()
    } else {
        dependsOn ':copyMacosNativeDep'
        systemProperty "java.library.path", 'build/libs'

        useJUnit()

        maxHeapSize = '1G'

        // Enable logging output to stderr
        testLogging.showStandardStreams = true
    }
}

task runMain(type: JavaExec) {
    systemProperty "java.library.path", 'build/libs'
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = javaMainClass
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

jar {
    //from configurations.compile.collect { zipTree it }
    into('lib') {
        from "src/main/jniLibs"
    }
}

signing {
    if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        sign configurations.archives
        sign publishing.publications
    }
}

publishing {
    repositories {
        //mavenLocal()
        maven {
            name = "Maven"
            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            credentials {
                username = project.properties['maven.username']
                password = project.properties['maven.password']
            }
        }
    }
    publications {
        register("jar", MavenPublication) {
            from(components["java"])
            pom {
                url.set("git@github.com:mattrglobal/ffi-bbs-signatures.git")
            }
        }
    }
}

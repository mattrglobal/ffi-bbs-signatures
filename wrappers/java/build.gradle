/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id 'application'
    id 'signing'
}

group 'com.github.mattrglobal'
version '1.5-SNAPSHOT'

apply plugin : "java" 
apply plugin: "maven-publish"
apply plugin: 'signing'

ext {
   javaMainClass = "bbs.signatures.Bbs"
}
 
application {
    mainClassName = javaMainClass
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

// Builds all the available binaries
// given the current host
task buildAndroidBinaries(type:Exec) {  
    workingDir '../../'

    // Builds the Android Binaries
    commandLine './scripts/build.sh' , 'ANDROID' , 'out'
}

// Builds all the available binaries
// given the current host
task buildMacosBinaries(type:Exec) {  
    workingDir '../../'

    // Build MacOS Binaries (if on Mac)
    commandLine './scripts/build.sh' , 'MACOS', 'out'
}

// Builds and copies the required binaries for the java wrapper
task buildBinaries {
    dependsOn ':buildAndroidBinaries'
    dependsOn ':buildMacosBinaries'
}

// Copies the android binaries to the JNI libraries folder
task copyAndroidBinaries(type:Exec) {
    workingDir '../../'

    //on linux
    commandLine 'cp', '-r', 'out/android/', 'wrappers/java/src/main/jniLibs/'
}

// Copies the android binaries to the JNI libraries folder
task copyMacosBinaries(type:Exec) {
    workingDir '../../'
    
    //on macos
    commandLine 'cp', '-r', 'out/macos/', 'wrappers/java/src/main/jniLibs/'
}

// Copies the required binaries for the java wrapper
task copyBinaries {
    dependsOn ':copyAndroidBinaries'
    dependsOn ':copyMacosBinaries'
}

// Builds and copies the required binaries for the java wrapper
task buildAndCopyBinaries {
    dependsOn ':buildBinaries'
    dependsOn ':copyBinaries'
}

/* Copy the native bbs file */
task copyMacosNativeDep(type: Copy) {
    from 'src/main/jniLibs/darwin-x86_64/libbbs.dylib'
    into 'build/libs'
}

/* Test with JUNIT on Macos */
test {
    dependsOn copyMacosNativeDep
    systemProperty "java.library.path", 'build/libs'

    useJUnit()

    maxHeapSize = '1G'
    
    // Enable logging output to stderr
    testLogging.showStandardStreams = true
}

task runMain(type: JavaExec) {
    systemProperty "java.library.path", 'build/libs'
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = javaMainClass
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = "sources"
}

jar {
    //from configurations.compile.collect { zipTree it }
    into('bbs/jniLibs') {
        from "src/main/jniLibs"
    }
}

signing {
    if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        sign configurations.archives
        sign publishing.publications
    }
}

publishing {
    repositories {
        //mavenLocal()
        maven {
            name = "Maven"
            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            credentials {
                username = project.properties['maven.username']
                password = project.properties['maven.password']
            }
        }
    }
    publications {
        register("jar", MavenPublication) {
            from(components["java"])
            pom {
                url.set("git@github.com:mattrglobal/ffi-bbs-signatures.git")
            }
        }
    }
}
